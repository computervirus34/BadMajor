@model BadMajor.ReportViewModel

@{
    ViewBag.Title = "Index";
}
<style type="text/css">
    body {
        font-family: Helvetica, arial, sans-serif;
        font-size: 10px;
    }

    .header {
        font-family: Helvetica, arial, sans-serif;
        font-size: 16px;
    }

    .ddlLabel {
        font-family: Helsinki, arial, helvetica, sans-serif;
        font-size: 18px;
        margin-bottom: 24px;
        display: block;
        font-weight: bold;
        text-align: center;
        color: rgb(94, 4, 17);
    }

    .ddlValue {
        font-size: 10px;
        font-weight: lighter;
        font-family: Arial, Helvetica, sans-serif;
        font-size: 13px;
        color: rgb(94, 94, 94);
    }

    table {
        border: 1px solid #ccc;
        border-collapse: collapse;
        background-color: #fff;
    }


        table th {
            background-color: #B8DBFD;
            color: #333;
            font-weight: bold;
        }


        table th, table td {
            padding: 5px;
            border: 1px solid #ccc;
        }


        table, table table td {
            border: 0px solid #ccc;
        }

    .hiddenFiled {
        display: none;
    }

    .Pager span {
        text-align: center;
        color: #333;
        display: inline-block;
        width: 20px;
        background-color: #B8DBFD;
        margin-right: 3px;
        line-height: 150%;
        border: 1px solid #B8DBFD;
    }


    .Pager a {
        text-align: center;
        display: inline-block;
        width: 20px;
        background-color: #ccc;
        color: #333;
        border: 1px solid #ccc;
        margin-right: 3px;
        line-height: 150%;
        text-decoration: none;
    }
</style>

@*@using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })*@
<div class="row" style="padding-top:20px;">
    <div class="col-md-2">
        @Html.LabelFor(model => model.creddesc, htmlAttributes: new { @class = "control-label ddlLabel" })
        @Html.ListBoxFor(model => model.creddesc, new SelectList(@Model.creddescList, "value", "text"),
             new { @class = "form-control input-md ddlValue" })
        @Html.ValidationMessageFor(model => model.creddesc, "", new { @class = "text-danger" })
    </div>
    <div class="col-md-2">
        @Html.LabelFor(model => model.state, htmlAttributes: new { @class = "control-label ddlLabel" })
        @Html.ListBoxFor(model => model.state, new SelectList(@Model.stateList, "value", "text"),
             new { @class = "form-control input-md ddlValue" })
        @Html.ValidationMessageFor(model => model.state, "", new { @class = "text-danger" })
    </div>
    <script type="text/javascript">
            $(document).ready(function () {
                $("#state").change(function () {
                    debugger;
                    var states = [];
                    var x = document.getElementById("state");
                    for (var i = 0; i < x.options.length; i++) {
                        if (x.options[i].selected == true) {
                            states.push(x.options[i].value);
                        }
                    }
                    console.log(states.toString());
                    $("#major_grouping_desc").prop("disabled", false);
                    $("#instnm").prop("disabled", false);
                    $("#instnm").empty();
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("getInstnm")',
                        dataType: 'json',
                        data: { states: states },
                        success: function (instnm) {
                            $.each(instnm, function (i, instnm) {
                                $("#instnm").append('<option value="'
                                    + instnm.Value + '">'
                                    + instnm.Text + '</option>');
                            });
                        },
                        error: function (ex) {
                            //alert('Failed.' + ex);
                        }
                    });
                });
                return false;
            });
    </script>
    <div class="col-md-3">
        @Html.LabelFor(model => model.instnm, htmlAttributes: new { @class = "control-label ddlLabel" })
        @Html.ListBoxFor(model => model.instnm, new SelectList(String.Empty, "value", "text"),
            new { @class = "form-control input-md ddlValue", @disabled = "true" })
        @Html.ValidationMessageFor(model => model.instnm, "", new { @class = "text-danger" })
    </div>
    <div class="col-md-2">
        @Html.LabelFor(model => model.major_grouping_desc, htmlAttributes: new { @class = "control-label ddlLabel" })
        @Html.ListBoxFor(model => model.major_grouping_desc, new SelectList(@Model.majorGroupingList, "value", "text"),
                 new { @class = "form-control input-md ddlValue", @disabled = "true" })
        @Html.ValidationMessageFor(model => model.major_grouping_desc, "", new { @class = "text-danger" })
    </div>
    <script type="text/javascript">
            $(document).ready(function () {
                $("#major_grouping_desc").change(function () {
                    debugger;
                    var creddescs = [];
                    var instnms = [];
                    var major_grouping_descs = [];

                    var x = document.getElementById("creddesc");
                    for (var i = 0; i < x.options.length; i++) {
                        if (x.options[i].selected == true) {
                            creddescs.push(x.options[i].value);
                        }
                    }
                    console.log(creddescs.toString());
                    var x = document.getElementById("instnm");
                    for (var i = 0; i < x.options.length; i++) {
                        if (x.options[i].selected == true) {
                            instnms.push(x.options[i].value);
                        }
                    }
                    console.log(instnms.toString());
                    var x = document.getElementById("major_grouping_desc");
                    for (var i = 0; i < x.options.length; i++) {
                        if (x.options[i].selected == true) {
                            major_grouping_descs.push(x.options[i].value);
                        }
                    }
                    console.log(major_grouping_descs.toString());
                    debugger
                    $("#major").prop("disabled", false);
                    $("#major").empty();
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("getMajor")',
                        dataType: 'json',
                        data: { credential_id: creddescs, instId: instnms, major_grouping_id: major_grouping_descs },
                        success: function (major) {
                            $.each(major, function (i, major) {
                                $("#major").append('<option value="'
                                    + major.Value + '">'
                                    + major.Text + '</option>');
                            });
                        },
                        error: function (ex) {
                            //alert('Failed.' + ex);
                        }
                    });
                });
                return false;
            });
    </script>
    <div class="col-md-3">
        @Html.LabelFor(model => model.major, htmlAttributes: new { @class = "control-label ddlLabel" })
        @Html.ListBoxFor(model => model.major, new SelectList(String.Empty, "value", "text"),
                    new { @class = "form-control input-md ddlValue", @disabled = "true" })
        @Html.ValidationMessageFor(model => model.major, "", new { @class = "text-danger" })
    </div>

</div>
<div class="row">
    <div class="col-md-2 offset-5">
        <br />
        <input type="submit" id="btnSubmit" value="Search" class="btn btn-default btn-primary" />
    </div>
</div>


<hr />
<table id="tblEarnings" class="table table-bordered" cellpadding="0" cellspacing="0" style="font-size:10px;">
    <thead>
        <tr>
            <th>Degree Type</th>
            <th>State</th>
            <th>College</th>
            <th>Major Group</th>
            <th>Major</th>
            <th data-toggle="tooltip" data-placement="bottom" title="Expected cost for one year">Cost</th>
            <th data-toggle="tooltip" data-placement="top" title="Expected Earnings 1 year after graduation">Earnings</th>
            <th data-toggle="tooltip" data-placement="top" title="Return on Investment.This is how much more money you will make over your lifetime than you would if you did not get this degree.The calculation is based on the cost and future value of your degree.">ROI</th>
            <th>Years to Recoup</th>
            <th data-toggle="tooltip" data-placement="top" title="This is the letter grade BadMajors assigns this degree from this institution. It is based on the cost and future value of your degree compared to what it would be if you did not pursue the degree. It is meant to provide a quick way to gauge the program you are considering.">Grade</th>
            <th data-toggle="tooltip" data-placement="top" title="The average earnings of the degree type that is the equivalent of the degree you are pursuing">Equivalent</th>
            <th class="hiddenFiled"></th>
            <th class="hiddenFiled"></th>
            <th class="hiddenFiled"></th>
            <th class="hiddenFiled"></th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>
<div id="dialog" style="display: none">
</div>
<br />
<div id="pagination"></div>
<link href="~/Content/jquery-ui.css" rel="stylesheet" />

<script src="~/Scripts/ASPSnippets_Pager.min.js"></script>
<script src="~/Scripts/jquery-ui.min.js"></script>

<script type="text/javascript">
    var currencyFormatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 0
    });
    $(document).ready(function () {

        $("#btnSubmit").click(function () {
            debugger;
            GetValuesToReport(1);
        });

        $('#tblEarnings').on('change', 'input', function () {
            debugger;
            // get the value of the input field
            var inputValue = $(this).val().replace(/[^\d.-]/g, '');;
            var row_index = $(this).closest("tr").index();
            var degree = $(this).closest('tr').find('td:eq(11)').text();
            var instCode = $(this).closest('tr').find('td:eq(12)').text();
            var majorGroup = $(this).closest('tr').find('td:eq(13)').text();
            var majorCode = $(this).closest('tr').find('td:eq(14)').text();

            console.log('Input value:', inputValue);
            console.log('Row:', row_index);
            // send an AJAX request to the server with the updated data
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetCostChangeResult")',
                dataType: 'json',
                data: { credential_id: degree, instId: instCode, major_grouping_id: majorGroup, cipCode: majorCode, cost:inputValue },
                success: function (response) {
                    var formattedCost = currencyFormatter.format(inputValue);
                    var formattedRoi = isNaN(response.roi) ? response.roi : currencyFormatter.format(response.roi);
                    console.log(response.roi + '-' + response.years_to_recoup_cost);
                    //if (response.length == 1) {
                    $('#input-' + row_index).val(formattedCost);
                    $('#roi-' + row_index).text(formattedRoi);
                    $('#years-' + row_index).text(response.years_to_recoup_cost);
                    $('#grade-' + row_index).text(response.grade);
                    //}
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
            });
        });

        $('#pagination').on('click', 'a', function (event) {
            
            event.preventDefault();
            var page = $(this).data('page');
            console.log('Page:'+page);
            //var data = getDataForPage(page);
            $('#tblEarnings tbody').empty();
            GetValuesToReport(page);
        });

        $('#tblEarnings').on('click', 'button', function () {
            debugger;
            // get the value of the input field
            var row_index = $(this).closest("tr").index();
            var instCode = $(this).closest('tr').find('td:eq(12)').text();
            console.log('Row:', row_index);
            console.log('Code:', instCode);
            // send an AJAX request to the server with the updated data
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetCostBreakDown")',
                dataType: 'json',
                data: { instCode: instCode},
                success: function (response) {
                    console.log(response);
                    var InStateTuition = currencyFormatter.format(response.InStateTuition);
                    var OutStateTuition = currencyFormatter.format(response.OutStateTuition);
                    var FeesAndOtherExp = currencyFormatter.format(response.FeesAndOtherExp);
                    var RoomAndBoard = currencyFormatter.format(response.RoomAndBoard);
                    var Books = currencyFormatter.format(response.Books);
                    var message = "1. In State Tuition:" + InStateTuition + "<br/>2. Out of State Tuition:" + OutStateTuition + "<br/>3. Fees and Other Expenses:" + FeesAndOtherExp + "<br/>4. Room and Board:" + RoomAndBoard + "<br/>5. Books:" + Books;
                    ShowPopup(message);

                    //alert(message);
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
            });
        });
    });

    //$("body").on("click", ".Pager .page", function () {
    //    GetEarningsDetails(parseInt($(this).attr('page')));
    //});
    function ShowPopup(message) {
        $(function () {
            $("#dialog").html(message);
            $("#dialog").dialog({
                title: "Cost Breakout for 1 year",
                modal: true
            });
        });
    };
    function GetValuesToReport(pageIndex) {
        var creddescs = [];
        var instnms = [];
        var major_grouping_descs = [];
        var cipcodes = [];

        var x = document.getElementById("creddesc");
        for (var i = 0; i < x.options.length; i++) {
            if (x.options[i].selected == true) {
                creddescs.push(x.options[i].value);
            }
        }
        console.log(creddescs.toString());
        var x = document.getElementById("instnm");
        for (var i = 0; i < x.options.length; i++) {
            if (x.options[i].selected == true) {
                instnms.push(x.options[i].value);
            }
        }
        console.log(instnms.toString());
        var x = document.getElementById("major_grouping_desc");
        for (var i = 0; i < x.options.length; i++) {
            if (x.options[i].selected == true) {
                major_grouping_descs.push(x.options[i].value);
            }
        }
        console.log(major_grouping_descs.toString());

        var x = document.getElementById("major");
        for (var i = 0; i < x.options.length; i++) {
            if (x.options[i].selected == true) {
                cipcodes.push(x.options[i].value.toString());
            }
        }
        console.log(cipcodes.toString());

        GetEarningsDetails(pageIndex, creddescs, instnms, major_grouping_descs, cipcodes);
    }
    function GetEarningsDetails(pageIndex, creddesc, instnm, major_grouping_desc, cipCode) {
        debugger;
        var data = {};
        data.pageIndex = pageIndex;
        data.credential_id = creddesc;
        data.instId = instnm;
        data.major_grouping_id = major_grouping_desc;
        data.cipCode = cipCode;
        $.ajax({
            type: "POST",
            url: '@Url.Action("EarningDetails")',
            data: JSON.stringify(data), //'{ pageIndex:' + pageIndex + ', credential_id:' + creddesc + ', instId:' + instnm + ', major_grouping_id:' + major_grouping_desc + ', cipCode:' + JSON.stringify(cipCode) +'}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: OnSuccess,
            failure: function (response) {
                //alert(response.d);
            },
            error: function (response) {
                //alert(response.d);
            }
        });
    }
    function OnSuccess(response) {
        $('#tblEarnings tbody').empty();

        for (var i = 0; i < response.Reports.length; i++) {
            //var earnings = this;
            var formattedCost = currencyFormatter.format(response.Reports[i]['cost']);
            var formattedEarnings = currencyFormatter.format(response.Reports[i]['earnings']);
            var formattedRoi = isNaN(response.Reports[i]['roi']) ? response.Reports[i]['roi'] : currencyFormatter.format(response.Reports[i]['roi']);

            var row = '<tr>';
            row += '<td>' + response.Reports[i]['creddesc'] + '</td>';
            row += '<td>' + response.Reports[i]['state'] + '</td>';
            row += '<td>' + response.Reports[i]['instnm'] + '</td>';
            row += '<td>' + response.Reports[i]['major_grouping_desc'] + '</td>';
            row += '<td>' + response.Reports[i]['major'] + '</td>';
            row += '<td><input id="input-' + i + '" type="text" value="' + formattedCost + '"><button id="button-'+ i + '">Break Down</button></td>';
            row += '<td>' + formattedEarnings + '</td>';
            row += '<td id="roi-' + i + '">' + formattedRoi + '</td>';
            row += '<td id="years-' + i +'">' + response.Reports[i]['years_to_recoup_cost'] + '</td>';
            row += '<td id="grade-' + i +'">' + response.Reports[i]['grade'] + '</td>';
            row += '<td>' + response.Reports[i]['equivalent'] + '</td>';
            row += '<td class="hiddenFiled">' + response.Reports[i]['degree'] + '</td>';
            row += '<td class="hiddenFiled">' + response.Reports[i]['instCode'] + '</td>';
            row += '<td class="hiddenFiled">' + response.Reports[i]['major_group'] + '</td>';
            row += '<td class="hiddenFiled">' + response.Reports[i]['majorcode'] + '</td>';
            row += '</tr>';
            $('#tblEarnings tbody').append(row);
        }
        generatePagination(response.RecordCount / 10, response.PageIndex);
    }
    function generatePagination(totalPages, currentPage) {
        $('#pagination').empty();
        for (var i = 1; i <= totalPages; i++) {
            var activeClass = i == currentPage ? 'active' : '';
            var link = '<a href="#" data-page="' + i + '" class="' + activeClass + '">' + i + '</a>';
            $('#pagination').append(link);
        }
    }
    //function OnSuccessOld(response) {
    //    let i = 1;
    //    var model = response;
    //    console.log(model.Reports);
    //    var row = $("#tblEarnings tr:last-child").removeAttr("style").clone(true);
    //    $("#tblEarnings tr").not($("#tblEarnings tr:first-child")).remove();
    //    $.each(model.Reports, function () {
    //        var earnings = this;
    //        $("td", row).eq(0).html(earnings.creddesc);
    //        $("td", row).html('<input type=hidden value=' + earnings.creddesc + ' class="cred_id" />');
    //        $("td", row).html('<input type=hidden value=' + earnings.instnm + ' class="instnm" />');
    //        $("td", row).html('<input type=hidden value=' + earnings.major_grouping_desc + ' class="major_grouping_desc" />');
    //        $("td", row).html('<input type=hidden value=' + earnings.major + ' class="major" />');
    //        $("td", row).eq(1).html(earnings.state);
    //        $("td", row).eq(2).html(earnings.instnm);
    //        $("td", row).eq(3).html(earnings.major_grouping_desc);
    //        $("td", row).eq(4).html(earnings.major);
    //        $("td", row).eq(5).html('<input class="costInput" length=8 min=0 type=number value=' + earnings.cost +' onkeyup="ReCalculateROI(false)" id=costInput'+i +' />');
    //        $("td", row).eq(6).html(earnings.earnings);
    //        $("td", row).eq(7).html(earnings.roi);
    //        $("td", row).eq(8).html(earnings.years_to_recoup_cost);
    //        $("td", row).eq(9).html(earnings.grade);
    //        $("td", row).eq(10).html(earnings.equivalent);
    //        $("#tblEarnings").append(row);
    //        row = $("#tblEarnings tr:last-child").clone(true);
    //        i += 1;
    //    });
    //    $(".Pager").ASPSnippets_Pager({
    //        ActiveCssClass: "current",
    //        PagerCssClass: "pager",
    //        PageIndex: model.PageIndex,
    //        PageSize: model.PageSize,
    //        RecordCount: model.RecordCount
    //    });
    //};


    //function updateData() {
    //    // Update the data on the server when a cell is edited
    //    var cellValue = $(this).val();
    //    var rowIndex = $(this).closest('tr').index();
    //    var colIndex = $(this).closest('td').index();

    //    $.ajax({
    //        url: '/api/updateData',
    //        type: 'POST',
    //        data: {
    //            rowIndex: rowIndex,
    //            colIndex: colIndex,
    //            value: cellValue
    //        }
    //    });
    //}
</script>

